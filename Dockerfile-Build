### ----------------------------------------------------------
### This Dockerfile is generated by an upstream toolkit script.
### If you found any issue in the Dockerfile,
###   please open an GitHub issue at https://github.com/dwchiang/nginx-php-fpm/issues
### ----------------------------------------------------------
    FROM php:8.3.6-fpm-alpine3.19 as app

    LABEL maintainer="Ernest Chiang <me@ernestchiang.com>"
    
    ARG VERSION_OS
    ENV VERSION_OS=${VERSION_OS}
    
    ### ----------------------------------------------------------
    # Proper iconv #240
    #   Ref: https://github.com/docker-library/php/issues/240
    ### ----------------------------------------------------------
    
    ENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php
    RUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community gnu-libiconv
    
    ### ----------------------------------------------------------
    ### Project Homepage = https://github.com/dwchiang/nginx-php-fpm
    ### ----------------------------------------------------------
    ### Support this project = https://www.buymeacoffee.com/ernestchiang
    ### ----------------------------------------------------------
    ### Part 1 of Nginx Dockerfile source https://hub.docker.com/_/nginx/
    ### https://github.com/nginxinc/docker-nginx/blob/ed439d2266cee6304339d50c5fe33d8f87f6eb37/stable/alpine-slim/Dockerfile
    ### ----------------------------------------------------------
    # FROM alpine:3.19
    # LABEL maintainer="NGINX Docker Maintainers <docker-maint@nginx.com>"
    
    ENV NGINX_VERSION 1.26.0
    ENV PKG_RELEASE   1
    
    RUN set -x \
    # create nginx user/group first, to be consistent throughout docker variants
        && addgroup -g 101 -S nginx \
        && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \
        && apkArch="$(cat /etc/apk/arch)" \
        && nginxPackages=" \
            nginx=${NGINX_VERSION}-r${PKG_RELEASE} \
        " \
    # install prerequisites for public key and pkg-oss checks
        && apk add --no-cache --virtual .checksum-deps \
            openssl \
        && case "$apkArch" in \
            x86_64|aarch64) \
    # arches officially built by upstream
                set -x \
                && KEY_SHA512="e09fa32f0a0eab2b879ccbbc4d0e4fb9751486eedda75e35fac65802cc9faa266425edf83e261137a2f4d16281ce2c1a5f4502930fe75154723da014214f0655" \
                && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \
                && if echo "$KEY_SHA512 */tmp/nginx_signing.rsa.pub" | sha512sum -c -; then \
                    echo "key verification succeeded!"; \
                    mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \
                else \
                    echo "key verification failed!"; \
                    exit 1; \
                fi \
                && apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages \
                ;; \
            *) \
    # we're on an architecture upstream doesn't officially build for
    # let's build binaries from the published packaging sources
                set -x \
                && tempDir="$(mktemp -d)" \
                && chown nobody:nobody $tempDir \
                && apk add --no-cache --virtual .build-deps \
                    gcc \
                    libc-dev \
                    make \
                    openssl-dev \
                    pcre2-dev \
                    zlib-dev \
                    linux-headers \
                    bash \
                    alpine-sdk \
                    findutils \
                && su nobody -s /bin/sh -c " \
                    export HOME=${tempDir} \
                    && cd ${tempDir} \
                    && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && PKGOSSCHECKSUM=\"f0ee7cef9a6e4aa1923177eb2782577ce61837c22c59bd0c3bd027a0a4dc3a3cdc4a16e95480a075bdee32ae59c0c6385dfadb971f93931fea84976c4a21fceb *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\" \
                    && if [ \"\$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then \
                        echo \"pkg-oss tarball checksum verification succeeded!\"; \
                    else \
                        echo \"pkg-oss tarball checksum verification failed!\"; \
                        exit 1; \
                    fi \
                    && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \
                    && cd alpine \
                    && make base \
                    && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \
                    && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \
                    " \
                && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \
                && apk del --no-network .build-deps \
                && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \
                ;; \
        esac \
    # remove checksum deps
        && apk del --no-network .checksum-deps \
    # if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
        && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi \
        && if [ -f "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \
    # Bring in gettext so we can get `envsubst`, then throw
    # the rest away. To do this, we need to install `gettext`
    # then move `envsubst` out of the way so `gettext` can
    # be deleted completely, then move `envsubst` back.
        && apk add --no-cache --virtual .gettext gettext \
        && mv /usr/bin/envsubst /tmp/ \
        \
        && runDeps="$( \
            scanelf --needed --nobanner /tmp/envsubst \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
        )" \
        && apk add --no-cache $runDeps \
        && apk del --no-network .gettext \
        && mv /tmp/envsubst /usr/local/bin/ \
    # Bring in tzdata so users could set the timezones through the environment
    # variables
        && apk add --no-cache tzdata \
    # forward request and error logs to docker log collector
        && ln -sf /dev/stdout /var/log/nginx/access.log \
        && ln -sf /dev/stderr /var/log/nginx/error.log \
    # create a docker-entrypoint.d directory
        && mkdir /docker-entrypoint.d
    
    ### ----------------------------------------------------------
    ### https://github.com/nginxinc/docker-nginx/blob/ed439d2266cee6304339d50c5fe33d8f87f6eb37/stable/alpine/Dockerfile
    ### ----------------------------------------------------------
    ### FROM nginx:1.26.0-alpine-slim
    
    ENV NJS_VERSION   0.8.4
    
    RUN set -x \
        && apkArch="$(cat /etc/apk/arch)" \
        && nginxPackages=" \
            nginx=${NGINX_VERSION}-r${PKG_RELEASE} \
            nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \
            nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \
            nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \
            nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \
        " \
    # install prerequisites for public key and pkg-oss checks
        && apk add --no-cache --virtual .checksum-deps \
            openssl \
        && case "$apkArch" in \
            x86_64|aarch64) \
    # arches officially built by upstream
                apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages \
                ;; \
            *) \
    # we're on an architecture upstream doesn't officially build for
    # let's build binaries from the published packaging sources
                set -x \
                && tempDir="$(mktemp -d)" \
                && chown nobody:nobody $tempDir \
                && apk add --no-cache --virtual .build-deps \
                    gcc \
                    libc-dev \
                    make \
                    openssl-dev \
                    pcre2-dev \
                    zlib-dev \
                    linux-headers \
                    libxslt-dev \
                    gd-dev \
                    geoip-dev \
                    libedit-dev \
                    bash \
                    alpine-sdk \
                    findutils \
                && su nobody -s /bin/sh -c " \
                    export HOME=${tempDir} \
                    && cd ${tempDir} \
                    && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && PKGOSSCHECKSUM=\"f0ee7cef9a6e4aa1923177eb2782577ce61837c22c59bd0c3bd027a0a4dc3a3cdc4a16e95480a075bdee32ae59c0c6385dfadb971f93931fea84976c4a21fceb *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\" \
                    && if [ \"\$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then \
                        echo \"pkg-oss tarball checksum verification succeeded!\"; \
                    else \
                        echo \"pkg-oss tarball checksum verification failed!\"; \
                        exit 1; \
                    fi \
                    && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \
                    && cd alpine \
                    && make module-geoip module-image-filter module-njs module-xslt \
                    && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \
                    && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \
                    " \
                && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \
                && apk del --no-network .build-deps \
                && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \
                ;; \
        esac \
    # remove checksum deps
        && apk del --no-network .checksum-deps \
    # if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
        && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi \
        && if [ -f "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \
    # Bring in curl and ca-certificates to make registering on DNS SD easier
        && apk add --no-cache curl ca-certificates
    
    ### ----------------------------------------------------------
    ### Setup supervisord, nginx config
    ### ----------------------------------------------------------
    
    RUN set -x && \
        apk update && apk upgrade && \
        apk add --no-cache \
            supervisor \
            gettext \
            procps \
            net-tools \
            nano \
            libzip-dev \
            wget \
            gnupg \
            libbz2 \
            libpng-dev \
            libxml2 \
            libxml2-dev \
            unzip \
            npm && \
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php composer-setup.php && \
            mv composer.phar /usr/local/bin/composer && \
            composer self-update 2.5.8 && \
        rm -Rf /etc/nginx/nginx.conf && \
        rm -Rf /etc/nginx/conf.d/default.conf && \
        # folders
        mkdir -p /var/log/supervisor
    
    RUN docker-php-ext-install -j$(nproc) \
        bcmath \
        mysqli \
        pdo \
        pdo_mysql \
        bz2 \
        gd \
        exif \
        opcache \
        soap \
        zip
    
    RUN apk add postgresql libpq-dev && \
    docker-php-ext-install pdo_pgsql
    
    RUN mkdir -p /etc/nginx/snippets
    COPY dockerconfig/fastcgi-php.conf /etc/nginx/snippets/fastcgi-php.conf
    COPY dockerconfig/fastcgi.conf /etc/nginx/fastcgi.conf

    # SETUP PHP CONFIG SETTINGS
    RUN echo 'upload_max_filesize = 100M;' >> /usr/local/etc/php/conf.d/custom.php.ini && \
        echo 'post_max_size = 100M;' >> /usr/local/etc/php/conf.d/custom.php.ini && \
        echo 'memory_limit = -1;' >> /usr/local/etc/php/conf.d/custom.php.ini && \
        echo 'max_execution_time = 1000;' >> /usr/local/etc/php/conf.d/custom.php.ini && \
        echo 'expose_php = Off;' >> /usr/local/etc/php/conf.d/custom.php.ini && \
        echo "date.timezone = Asia/Jakarta;" >> /usr/local/etc/php/conf.d/uploads.ini &&\
        echo 'log_errors = On;' >> /usr/local/etc/php/conf.d/custom.php.ini

    COPY dockerconfig/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
    COPY dockerconfig/nginx.conf /etc/nginx/nginx.conf
    COPY dockerconfig/nginx-default.conf /etc/nginx/conf.d/default.conf

    COPY dockerconfig/docker-entrypoint.sh /
    COPY dockerconfig/10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
    COPY dockerconfig/20-envsubst-on-templates.sh /docker-entrypoint.d
    COPY dockerconfig/30-tune-worker-processes.sh /docker-entrypoint.d
    
    EXPOSE 80
    
    STOPSIGNAL SIGTERM

    # Buat direktori untuk file PHP
    # RUN mkdir /var/www/html

    # Salin proyek Laravel ke direktori yang sesuai
    COPY . /var/www/html/

    WORKDIR /var/www/html/

    # RUN npm install && \
    #     npm run dev

    RUN composer install --no-scripts --prefer-dist

    # COPY site.conf.template /etc/nginx/templates/site.conf.template
    # COPY security.conf.template /etc/nginx/templates/security.conf.template

    RUN chown -R www-data:www-data /var/www/html
        
    ### ----------------------------------------------------------
    ### CMD
    ### ----------------------------------------------------------
    ENTRYPOINT ["/docker-entrypoint.sh"]
    CMD ["nginx", "-g", "daemon off;"]